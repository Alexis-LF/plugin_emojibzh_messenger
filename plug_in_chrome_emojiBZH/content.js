console.log("[emojiBZH] Le plug-in est bien charg√© !");

//******************vars globales******************
  //photos
    let sacrifice ="https://static.xx.fbcdn.net/images/emoji.php/v9/tf3/1/32/1f3c1.png"; //32px
    let photoEmoji="https://raw.githubusercontent.com/Alexis-LF/plugin_emojibzh_messenger/master/plug_in_chrome_emojiBZH/img/photoEmoji32.png";
    let photoEmoji128 = "https://raw.githubusercontent.com/Alexis-LF/plugin_emojibzh_messenger/master/plug_in_chrome_emojiBZH/img/photoEmoji128.png";
  //d√©claration balises du DOM
    const barreDuBas = document.getElementsByClassName("_5irm _7mkm")[0];
    const barreEcriture = document.getElementsByClassName("_1mf _1mj")[0];
    const boutonPanelEmojis = document.getElementsByClassName("_30yy _7odb")[0];
    let sectionPanelEmojis = null;


//******************√©v√®nements******************

testBontonJaime();//d√®s le chargement
document.body.addEventListener("keyup",evenement);
document.body.addEventListener("keypress",evenement);
barreDuBas.addEventListener("click",evenement);
document.body.addEventListener("mousemove",evenement);

//doit attendre que le bouton d'envoi soit remplac√©
document.body.addEventListener("mouseup", function(){
      setTimeout(function()
      {
          evenement();
      },10);
});


let compteurEvenements = 0;
function evenement()
{
  compteurEvenements++;
  //console.log(`[emojiBZH] evenement n¬∞${compteurEvenements}`);
  testBontonJaime();
  drapeauxDansMessages();

}

//pour le panel d'√©mojis
let panelOuvert = false;
boutonPanelEmojis.addEventListener("click",clicPanelEmojis);




//*****************üëçbasDroite => emojiBZH******************
function testBontonJaime()
{
  //√† charger:
      //d√®s le d√©but
      //lors d'un changement de discussion
      //quand msg envoy√© ou pas √©crit (caract√®res ? entr√©e ? appui envoyer ?)

  let boutonJaime;
  //console.log("[emojiBZH] Recherche du bouton j'aime...");

  if ( barreDuBas.lastChild.getAttribute("class") === "_5j_u _30yy _4rv9 _6ymq _7v3t" )
  {
      //console.log(`[emojiBZH] bouton j'aime trouv√©!`);
      boutonJaime = document.getElementsByClassName("_5j_u _30yy _4rv9 _6ymq _7v3t")[0];
  }
  else
  {
    console.log(`[emojiBZH] Le bouton j'aime n'est pas affich√© √† l'√©cran.`);
    return;
  }

  let imgBoutonJaime = boutonJaime.firstChild.getAttribute("src")

  if ( imgBoutonJaime === sacrifice)
  {
    //console.log(`[emojiBZH] le drapeau de course est le bouton j'aime!\nIl va falloir le remplacer...`);
    boutonJaime.firstChild.setAttribute("src", photoEmoji);
  }
  else if (imgBoutonJaime === photoEmoji )
  {
    //console.log(`[emojiBZH] Apr√®s test, le drapeau breton est d√©ja appliqu√© !`);
  }
  else
  {
    //console.log(`[emojiBZH] Ce n'est pas l'emoji drapeau de course qui est appliqu√©\nIl faut s√©l√©ctionner cet √©moji pour mettre l'√©moji breton en tant que bouton j'aime.`);
  }

}


function drapeauxDansMessages()
{
  //on r√©cup√®re les √©lmt qui contiennent le drapeau

    //cas des gros √©mojis
      let divGrosEmoji = document.getElementsByTagName("div");
      let grosDrapeaux = [];
      for (var i = 0 ; i < divGrosEmoji.length ; i++)
      {
        if ( divGrosEmoji[i].getAttribute("aria-label") === "üèÅ" )
        {
          grosDrapeaux.push(divGrosEmoji[i]);
        }
      }

    //cas des √©mojis dans les msg texte
      let emojisDansMsg = document.getElementsByTagName("img");
      let petitsDrapeaux = [];
      for (var i = 0 ; i < emojisDansMsg.length ; i++)
      {
        if ( emojisDansMsg[i].getAttribute("alt") === "üèÅ" )
        {
          petitsDrapeaux.push(emojisDansMsg[i]);
        }
      }

  //on remplace !
    //cas des gros √©mojis
      for (var i = 0 ; i < grosDrapeaux.length ; i++ )
      {
        grosDrapeaux[i].firstChild.setAttribute("src",photoEmoji128);
      }

    //cas des √©mojis dans les msg texte
    for (var i = 0 ; i < petitsDrapeaux.length ; i++ )
    {
      petitsDrapeaux[i].setAttribute("src",photoEmoji);
    }
}

function clicPanelEmojis ()
{
  if (panelOuvert === false)
  {
    panelOuvert = true;
  }
  else
  {
    //ne pas √©x√©cuter la fonction car il est en train de se fermer
    panelOuvert = false;
    return;
  }
  panelEmojis2()
}

function panelEmojis2 ()
{
  //attendre que le panel soit ouvert
  setTimeout(function()
  {
    console.log(`[emojiBZH] et on rentre dans panelEmojis3...`);
    panelEmojis3();

  },500);
}


function panelEmojis3()
{
  console.log(`[emojiBZH] on est bien rent√©s dans panelEmojis3() `);


    let sectionPanelEmojis  = document.getElementsByClassName("_1uwv")[0];

  if (sectionPanelEmojis === undefined) //si √ßa n'a pas bien charg√©
  {
    console.log(`[emojiBZH] le panel n'a pas eu le temps de charger ! retour √† panelEmojis2 `);
    panelEmojis2();
  }
  else
  {
    console.log(`[emojiBZH] apparemment sectionPanelEmojis vaut ${sectionPanelEmojis} !`);

    sectionPanelEmojis.addEventListener("click",function(){
          setTimeout(function()
          {
              panelEmojis3();
          },100);
    });

  }




  console.log(`[emojiBZH] panel des √©mojis en action`);
  let listeEmojisDuPanel = document.getElementsByClassName(" _4rlu");
  console.log(listeEmojisDuPanel);
  for (var i = 0 ; i < listeEmojisDuPanel.length ; i++)
  {
    if (listeEmojisDuPanel[i].firstChild.firstChild.getAttribute("src") === sacrifice)
    {
      console.log(`[emojiBZH] un drapeau a √©t√© trouv√© !`);
      listeEmojisDuPanel[i].firstChild.firstChild.setAttribute("src",photoEmoji128);
      return;
    }
    else
    {
      console.log(`[emojiBZH] l'√©moji n¬∞${i} n'est pas un drapeau :'( `);
    }
  }

}
